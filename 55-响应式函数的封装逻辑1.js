const obj = {
    name: 'hlf',
    age: 20,
    address: '武汉'
}

// console.log(`${obj.name}今年${obj.age}岁，他在${obj.address}上学`);

//现在我们更改完属性值后，我们希望他可以自动的去执行我们上面的打印
// obj.age = 21
// obj.address = '十堰'

//开始封装

//1.因为我们重新更改了值，那么我们希望上面的打印需要重新执行一次，但是我们会发现这段代码在全局里
//如果代码比较多的时候，那么就不太合理了，所以我们最好将我们需要重新被执行的代码放在一个函数里会
//合适一些，简单来说就是我们需要把一个想要被响应式的代码放进一个函数里，然后这个函数就将会被响应式
//进行执行

// function foo() {
//     console.log(`${obj.name}今年${obj.age}岁，他在${obj.address}上学`);
// }

// function bar() {
//     console.log(`${obj.name}今年${obj.age}岁，他在${obj.address}工作`);
// }

//2.假如有多个函数都需要被响应式呢？所以我们就需要创建一个数组来存放需要被响应式的函数
// let reactiveFns = []
//之后我们遇到了想要被响应式的函数 直接将它push到这个数组里

//3.当我们发现某个属性值或者变量被更改了 我们才会去执行某些响应式操作 所以我们需要监听
// 现在创建一个监听的函数 然后把我们想要被响应式的函数 添加到这个响应式数组中
// function watchFns(fn){
//      reactiveFns.push(fn)
// }

//4.那么我们现在这个响应式数组中都有了这些想要被响应式的函数了 所以我们需要对他进行一个操作
//那么就需要将它给取出来
//  reactiveFns.foreach(fn=>{
//    fn()
//}
//

//5.现在将要想被响应式的函数直接通过我们的watchFn进行监听调用
// watchFn(function foo(){
//  code....
//}
//




